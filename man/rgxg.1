.TH RGXG 1 "Apr 12, 2020" "rgxg 0.1.2" "User Commands"
.SH "NAME"
rgxg \- ReGular eXpression Generator
.SH "SYNOPSIS"
.B rgxg
.RI COMMAND
.RB [ARGS]

.SH "DESCRIPTION"
.B rgxg
is a generator for (extended) regular expressions.

For instance it is useful to generate a regular expression to exactly
match a numeric range or all addresses of a given CIDR block.

.SH "COMMANDS"
.PP
.B alternation
.RB [options]
.RI [PATTERN...]

.RS 4
Generate a regular expression that matches any of the given patterns.

.B Options
.RS 3
.TP
\-N
Omit the outer parentheses, if any, of the regular expression. This
option can be useful if the generated regular expression is used within
another alternation.

.TP
\-h
Display help and exit.

.RE

.B Examples
.RS 3

Match either lion, elephant, rhino, buffalo or leopard:
.RS 3
.nf
$ rgxg alternation lion elephant rhino buffalo leopard
(lion|elephant|rhino|buffalo|leopard)
.fi
.RE

.RE

.RE


.PP
.B cidr
.RB [options]
.RI CIDR

.RS 4
Generate a regular expression that matches all addresses of the given CIDR
block. Both IPv4 and IPv6 CIDR blocks are supported.

.B Options
.RS 3
.TP
\-N
Omit the outer parentheses, if any, of the regular expression. This
option can be useful if the generated regular expression is used within
another alternation.

.TP
\-l
Match only IPv6 addresses with lower case letters. By default both lower and
upper case letters are matched.

.TP
\-U
Match only IPv6 addresses with upper case letters. By default both lower and
upper case letters are matched.

.TP
\-u
Do not match IPv6 addresses with zero compression (second form of text
representation of IPv6 addresses mentioned in section 2.2 of
.BR  "RFC 4291" ).

.TP
\-s
Do not match IPv6 addresses in mixed notation (third form of text
representation of IPv6 addresses mentioned in section 2.2 of
.BR  "RFC 4291" ).

.TP
\-h
Display help and exit.

.RE

.B Examples
.RS 3

Match 192.168.0.0/24:
.RS 3
.nf
$ rgxg cidr 192.168.0.0/24
192\.168\.0\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])
.fi
.RE

Match 2001:db8:aaaa:bbbb:cccc:dddd::/96 limited to lower case letters:
.RS 3
.nf
$ rgxg cidr \-l 2001:db8:aaaa:bbbb:cccc:dddd::/112
2001:0?db8:aaaa:bbbb:cccc:dddd((::[0-9a-f]{1,4}|::|:0?0?0?0(::|:[0-9a-f]{1,4}))|:0\.0(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){2})
.fi

.RE
Match 2001:db8:1234::/48 restricted to uncompressed standard notation:
.RS 3
.nf
$ rgxg cidr \-u \-s 2001:db8:1234::/48
2001:0?[Dd][Bb]8:1234(:[0-9A-Fa-f]{1,4}){5}
.fi
.RE

.RE

.RE


.PP
.B escape
.RB [options]
.RI STRING

.RS 4
Generate the regular expression which matches the given string by escaping the escape characters.

.B Options
.RS 3
.TP
\-h
Display help and exit.

.RE

.B Examples
.RS 3

Match '1+(2*(3-4))':
.RS 3
.nf
$ rgxg escape 1+(2*(3\-4))
1\\+\\(2\\*\\(3\-4\\)\\)
.fi
.RE

.RE

.RE

.PP
.B help
.RB [COMMAND]

.RS 4
Describe the usage of rgxg or the given COMMAND.
.RE


.PP
.B range
.RB [options]
.RI FIRST
.RB [LAST]

.RS 4
Generate a regular expression that matches the number range between FIRST and
LAST. If LAST is omitted the regular expression matches all numbers which are
greater than or equal FIRST. The numbers must be positive and given in base-10
notation.

.B Options
.RS 3
.TP
\-b \fIBASE\fR
Generate the regular expression for the number range with base BASE. The
BASE must be in the range between 2 and 32. The default base is 10.

.TP
\-N
Omit the outer parentheses, if any, of the regular expression. This
option can be useful if the generated regular expression is used within
another alternation.

.TP
\-l
For bases greater than 10 only match lower case letters. By default both
lower and upper case letters are matched.

.TP
\-U
For bases greater than 10 only match upper case letters. By default both
lower and upper case letters are matched.

.TP
\-h
Display help and exit.

.TP
\-z
Only match numbers with leading zeros. By default the number of leading
zeros depends on the length (i.e. the number of digits) of LAST (see also
\fB\-m\fR). The default is to not match numbers with leading zeros.

.TP
\-Z
Match numbers with a variable number of leading zeros. By default the maximum
number of leading zeros depends on the length (i.e. the number of digits) of
LAST (see also \fB\-m\fR). The default is to not match numbers with leading
zeros.

.TP
\-m \fILENGTH\fR
with \fB\-z\fR or \fB\-Z\fR, the minimum LENGTH of matched numbers. For
instance the number 5 with LENGTH set to 3 and \fB\-z\fR option set is matched
as '005'. If LENGTH is lesser than or equal to the number of digits of LAST,
this option has no effect.
.RE

.B Examples
.RS 3

Match the numbers from 0 to 31:
.RS 3
.nf
$ rgxg range 0 31
(3[01]|[12]?[0-9])
.fi
.RE

Match numbers from 0 to 31 with base 2:
.RS 3
.nf
$ rgxg range \-b 2 0 31
(1[01]{0,4}|0)
.fi
.RE

Match 0 to 31 with base 16:
.RS 3
.nf
$ rgxg range \-b 16 0 31
1?[0-9A-Fa-f]
.fi
.RE

Match 0 to 31 with base 16 limited to upper case letters:
.RS 3
.nf
$ rgxg range \-b 16 \-U 0 31
1?[0-9A-F]
.fi
.RE

Match 0 to 31 with base 16 limited to lower case letters:
.RS 3
.nf
$ rgxg range \-b 16 \-l 0 31
1?[0-9a-f]
.fi
.RE

Match 00 to 31:
.RS 3
.nf
$ rgxg range \-z 0 31
(3[01]|[0-2][0-9])
.fi
.RE

Match 0000 to 0031:
.RS 3
.nf
$ rgxg range \-z \-m 4 0 31
(003[01]|00[0-2][0-9])
.fi
.RE

Match 0 to 31 and 00 to 31 and 000 to 031:
.RS 3
.nf
$ rgxg range \-Z \-m 3 0 31
(0?3[01]|0?[0-2]?[0-9])
.fi
.RE

Match 0 to 31 and omit outer parentheses:
.RS 3
.nf
$ rgxg range \-N 0 31
3[01]|[12]?[0-9]
.fi
.RE

Match all numbers greater than or equal to 4096:
.RS 3
.nf
$ rgxg range 4096
([1-9][0-9]{4,}|[5-9][0-9]{3}|4[1-9][0-9]{2}|409[6-9])
.fi
.RE

.RE

.RE

.PP

.B version
.RS 4
Prints the version of the rgxg command.
.RE

.SH "EXIT STATUS"
The exit status is 0 if the regular expression has been successfully
generated. If an error occurred the exit status is 1.

.SH "NOTES"

The regular expressions generated by rgxg are supposed to be used in any
context. This may lead to some side effects.

For instance consider the following:

.RS 3
.nf
$ echo '192.168.0.999' | grep -E "$(rgxg cidr 192.168.0.0/24)"
192.168.0.999
$
.fi
.RE

This is correct because the regular expression for '192.168.0.0/24' matches '192.168.0.99'.

One can verify this by adding '-o' to grep:

.RS 3
.nf
echo '192.168.0.999' | grep -oE "$(rgxg cidr 192.168.0.0/24)"
192.168.0.99
$
.fi
.RE

As rgxg cannot know in which context the generated regular expression is used,
it is up to the user to ensure that the regular expression works as expected
(e.g. by adding anchors like '^' and '$').

In the example above adding line anchors leads to the expected behaviour:

.RS 3
.nf
$ echo '192.168.0.999' | grep -E "^$(rgxg cidr 192.168.0.0/24)$"
$
.fi
.RE

.SH "SEE ALSO"

.BR regex (7)

.SH "AUTHOR"
Hannes von Haugwitz <hannes@vonhaugwitz.com>
